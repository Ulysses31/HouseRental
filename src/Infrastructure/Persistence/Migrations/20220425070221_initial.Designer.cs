// <auto-generated />
using System;
using CleanArchitecture.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CleanArchitecture.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20220425070221_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.16")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.AdvertiserInfo", b =>
                {
                    b.Property<int>("AdvertiserInfoID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("AdvertiserInfoID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("Address");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("Code");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("Created");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("CreatedBy");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Email");

                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Guid");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("IsDeleted");

                    b.Property<bool>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("IsEnabled");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime")
                        .HasColumnName("LastModified");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("LastModifiedBy");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("Name");

                    b.Property<string>("Responsible")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("Responsible");

                    b.Property<string>("Telephone")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasColumnName("Telephone");

                    b.Property<string>("Website")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("Website");

                    b.HasKey("AdvertiserInfoID");

                    b.ToTable("AdvertiserInfo", "dbo");
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.Classified", b =>
                {
                    b.Property<int>("ClassifiedID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AdvertiserInfoID")
                        .HasColumnType("int");

                    b.Property<int>("CharacteristicsID")
                        .HasColumnType("int");

                    b.Property<int>("ClassifiedConstructionID")
                        .HasColumnType("int");

                    b.Property<string>("ClassifiedDesription")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("ClassifiedDesription");

                    b.Property<string>("ClassifiedTitle")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("ClassifiedTitle");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("Created");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("CreatedBy");

                    b.Property<int>("ExteriorFeaturesID")
                        .HasColumnType("int");

                    b.Property<int>("FloorNoID")
                        .HasColumnType("int");

                    b.Property<int>("GoogleMapPlaceID")
                        .HasColumnType("int");

                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Guid");

                    b.Property<int>("InteriorFeaturesID")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("IsDeleted");

                    b.Property<bool>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("IsEnabled");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime")
                        .HasColumnName("LastModified");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("LastModifiedBy");

                    b.Property<int>("PurposeID")
                        .HasColumnType("int");

                    b.Property<int>("SuitableForID")
                        .HasColumnType("int");

                    b.Property<int>("TypeID")
                        .HasColumnType("int");

                    b.HasKey("ClassifiedID");

                    b.HasIndex("AdvertiserInfoID");

                    b.HasIndex("CharacteristicsID")
                        .IsUnique();

                    b.HasIndex("ClassifiedConstructionID")
                        .IsUnique();

                    b.HasIndex("ExteriorFeaturesID")
                        .IsUnique();

                    b.HasIndex("FloorNoID");

                    b.HasIndex("GoogleMapPlaceID")
                        .IsUnique();

                    b.HasIndex("InteriorFeaturesID")
                        .IsUnique();

                    b.HasIndex("PurposeID");

                    b.HasIndex("SuitableForID")
                        .IsUnique();

                    b.HasIndex("TypeID");

                    b.ToTable("Classified", "dbo");
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.ClassifiedCharacteristics", b =>
                {
                    b.Property<int>("CharacteristicsID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AreaTm")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("AreaTm");

                    b.Property<DateTime?>("AvailableFrom")
                        .HasColumnType("datetime")
                        .HasColumnName("AvailableFrom");

                    b.Property<int>("Bathrooms")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("Bathrooms");

                    b.Property<int>("Bedrooms")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("Bedrooms");

                    b.Property<int>("BuildingCoefficient")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("BuildingCoefficient");

                    b.Property<int>("ContructionYear")
                        .HasColumnType("int")
                        .HasColumnName("ContructionYear");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("Created");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("CreatedBy");

                    b.Property<int>("Cuisines")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("Cuisines");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Description");

                    b.Property<int>("DistanceFromSea")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("DistanceFromSea");

                    b.Property<int>("EnergyClassID")
                        .HasColumnType("int");

                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Guid");

                    b.Property<int>("HeatingSystemID")
                        .HasColumnType("int");

                    b.Property<int>("HeatingTypeID")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("IsDeleted");

                    b.Property<bool>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("IsEnabled");

                    b.Property<int>("LandArea")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("LandArea");

                    b.Property<int>("LandAreaTm")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("LandAreaTm");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime")
                        .HasColumnName("LastModified");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("LastModifiedBy");

                    b.Property<int>("Levels")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("Levels");

                    b.Property<int>("Lounges")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("Lounges");

                    b.Property<int>("MonthlyShared")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("MonthlyShared");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("Price");

                    b.Property<decimal>("PricePerTm")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(10,2)")
                        .HasDefaultValue(0m)
                        .HasColumnName("PricePerTm");

                    b.Property<string>("PropertyCode")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("PropertyCode");

                    b.Property<DateTime?>("PublicationOfAdvert")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("PublicationOfAdvert");

                    b.Property<string>("Region")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Region");

                    b.Property<int>("Square")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("Square");

                    b.Property<string>("SystemCode")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("SystemCode");

                    b.Property<int>("YearOfRenovation")
                        .HasColumnType("int")
                        .HasColumnName("YearOfRenovation");

                    b.HasKey("CharacteristicsID");

                    b.HasIndex("EnergyClassID");

                    b.HasIndex("HeatingSystemID");

                    b.HasIndex("HeatingTypeID");

                    b.ToTable("ClassifiedCharacteristics", "dbo");
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.ClassifiedConstruction", b =>
                {
                    b.Property<int>("ClassifiedConstructionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ClassifiedConstructionID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("Created");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("CreatedBy");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Description");

                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Guid");

                    b.Property<bool>("Incomplete")
                        .HasColumnType("bit")
                        .HasColumnName("Incomplete");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("IsDeleted");

                    b.Property<bool>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("IsEnabled");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime")
                        .HasColumnName("LastModified");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("LastModifiedBy");

                    b.Property<bool>("NeedsToBeRenovated")
                        .HasColumnType("bit")
                        .HasColumnName("NeedsToBeRenovated");

                    b.Property<bool>("NeoClassical")
                        .HasColumnType("bit")
                        .HasColumnName("NeoClassical");

                    b.Property<bool>("NewlyBuilt")
                        .HasColumnType("bit")
                        .HasColumnName("NewlyBuilt");

                    b.Property<bool>("PentHouse")
                        .HasColumnType("bit")
                        .HasColumnName("PentHouse");

                    b.Property<bool>("Preserved")
                        .HasColumnType("bit")
                        .HasColumnName("Preserved");

                    b.Property<bool>("Renovated")
                        .HasColumnType("bit")
                        .HasColumnName("Renovated");

                    b.HasKey("ClassifiedConstructionID");

                    b.ToTable("ClassifiedConstruction", "dbo");
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.ClassifiedPurpose", b =>
                {
                    b.Property<int>("PurposeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PurposeID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("Created");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("CreatedBy");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Description");

                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Guid");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("IsDeleted");

                    b.Property<bool>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("IsEnabled");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime")
                        .HasColumnName("LastModified");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("LastModifiedBy");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Title");

                    b.HasKey("PurposeID");

                    b.ToTable("ClassifiedPurpose", "dbo");
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.ClassifiedType", b =>
                {
                    b.Property<int>("TypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TypeID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("Created");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("CreatedBy");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Description");

                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Guid");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("IsDeleted");

                    b.Property<bool>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("IsEnabled");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime")
                        .HasColumnName("LastModified");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("LastModifiedBy");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Title");

                    b.HasKey("TypeID");

                    b.ToTable("ClassifiedType", "dbo");
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.EnergyClass", b =>
                {
                    b.Property<int>("EnergyClassID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("EnergyClassID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("Created");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("CreatedBy");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Description");

                    b.Property<string>("EnergyClassValue")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("EnergyClassValue");

                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Guid");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("IsDeleted");

                    b.Property<bool>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("IsEnabled");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime")
                        .HasColumnName("LastModified");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("LastModifiedBy");

                    b.HasKey("EnergyClassID");

                    b.ToTable("EnergyClass", "dbo");
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.ExteriorFeature", b =>
                {
                    b.Property<int>("ExteriorFeaturesID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ExteriorFeaturesID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccessFrom")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasDefaultValue("Άσφαλτο")
                        .HasColumnName("AccessFrom");

                    b.Property<bool>("Awnings")
                        .HasColumnType("bit")
                        .HasColumnName("Awnings");

                    b.Property<bool>("Corner")
                        .HasColumnType("bit")
                        .HasColumnName("Corner");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("Created");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("CreatedBy");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Description");

                    b.Property<bool>("DisabledAccess")
                        .HasColumnType("bit")
                        .HasColumnName("DisabledAccess");

                    b.Property<bool>("Facade")
                        .HasColumnType("bit")
                        .HasColumnName("Facade");

                    b.Property<bool>("Garden")
                        .HasColumnType("bit")
                        .HasColumnName("Garden");

                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Guid");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("IsDeleted");

                    b.Property<bool>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("IsEnabled");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime")
                        .HasColumnName("LastModified");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("LastModifiedBy");

                    b.Property<string>("Orientation")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Orientation");

                    b.Property<bool>("ParkingSpot")
                        .HasColumnType("bit")
                        .HasColumnName("ParkingSpot");

                    b.Property<bool>("Pool")
                        .HasColumnType("bit")
                        .HasColumnName("Pool");

                    b.Property<bool>("PropertyView")
                        .HasColumnType("bit")
                        .HasColumnName("PropertyView");

                    b.Property<bool>("ResidentialZone")
                        .HasColumnType("bit")
                        .HasColumnName("ResidentialZone");

                    b.Property<int?>("ShowcaseGlassLength")
                        .HasColumnType("int");

                    b.Property<decimal>("StructureFactor")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("StructureFactor");

                    b.Property<bool?>("UnloadingRamp")
                        .HasColumnType("bit")
                        .HasColumnName("UnloadingRamp");

                    b.Property<bool>("Veranda")
                        .HasColumnType("bit")
                        .HasColumnName("Veranda");

                    b.Property<bool>("WithinCityPlan")
                        .HasColumnType("bit")
                        .HasColumnName("WithinCityPlan");

                    b.HasKey("ExteriorFeaturesID");

                    b.ToTable("ExteriorFeature", "dbo");
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.FloorNo", b =>
                {
                    b.Property<int>("FloorNoID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("FloorNoID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("Created");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("CreatedBy");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Description");

                    b.Property<string>("FloorNoValue")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("FloorNoValue");

                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Guid");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("IsDeleted");

                    b.Property<bool>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("IsEnabled");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime")
                        .HasColumnName("LastModified");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("LastModifiedBy");

                    b.HasKey("FloorNoID");

                    b.ToTable("FloorNo", "dbo");
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.FloorType", b =>
                {
                    b.Property<int>("FloorTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("Created");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("CreatedBy");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Description");

                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Guid");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("IsDeleted");

                    b.Property<bool>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("IsEnabled");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime")
                        .HasColumnName("LastModified");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("LastModifiedBy");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Title");

                    b.HasKey("FloorTypeID");

                    b.ToTable("FloorType", "dbo");
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.FrameType", b =>
                {
                    b.Property<int>("FrameTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("Created");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("CreatedBy");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Description");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("IsDeleted");

                    b.Property<bool>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("IsEnabled");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime")
                        .HasColumnName("LastModified");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("LastModifiedBy");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Title");

                    b.HasKey("FrameTypeID");

                    b.ToTable("FrameType", "dbo");
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.GoogleMapPlace", b =>
                {
                    b.Property<int>("GoogleMapPlaceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("GoogleMapPlaceID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Area")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("Area");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("Created");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("CreatedBy");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Description");

                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Guid");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("IsDeleted");

                    b.Property<bool>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("IsEnabled");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime")
                        .HasColumnName("LastModified");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("LastModifiedBy");

                    b.Property<string>("Latitude")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Latitude");

                    b.Property<string>("Longitude")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Longitude");

                    b.HasKey("GoogleMapPlaceID");

                    b.ToTable("GoogleMapPlace", "dbo");
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.HeatingSystem", b =>
                {
                    b.Property<int>("HeatingSystemID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("HeatingSystemID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("Created");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("CreatedBy");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Description");

                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Guid");

                    b.Property<string>("HeatingSystemValue")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("HeatingSystemValue");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("IsDeleted");

                    b.Property<bool>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("IsEnabled");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime")
                        .HasColumnName("LastModified");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("LastModifiedBy");

                    b.HasKey("HeatingSystemID");

                    b.ToTable("HeatingSystem", "dbo");
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.HeatingType", b =>
                {
                    b.Property<int>("HeatingTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("HeatingTypeID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("Created");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("CreatedBy");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Description");

                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Guid");

                    b.Property<string>("HeatingTypeValue")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("HeatingTypeValue");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("IsDeleted");

                    b.Property<bool>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("IsEnabled");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime")
                        .HasColumnName("LastModified");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("LastModifiedBy");

                    b.HasKey("HeatingTypeID");

                    b.ToTable("HeatingType", "dbo");
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.InteriorFeature", b =>
                {
                    b.Property<int>("InteriorFeaturesID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("InteriorFeaturesID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("AirConditioning")
                        .HasColumnType("bit")
                        .HasColumnName("AirConditioning");

                    b.Property<bool>("Airy")
                        .HasColumnType("bit")
                        .HasColumnName("Airy");

                    b.Property<bool>("Alarm")
                        .HasColumnType("bit")
                        .HasColumnName("Alarm");

                    b.Property<bool>("CableTV")
                        .HasColumnType("bit")
                        .HasColumnName("CableTV");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("Created");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("CreatedBy");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Description");

                    b.Property<bool>("DoorScreens")
                        .HasColumnType("bit")
                        .HasColumnName("DoorScreens");

                    b.Property<bool>("DoubleGlazing")
                        .HasColumnType("bit")
                        .HasColumnName("DoubleGlazing");

                    b.Property<bool>("Elevator")
                        .HasColumnType("bit")
                        .HasColumnName("Elevator");

                    b.Property<bool>("Fireplace")
                        .HasColumnType("bit")
                        .HasColumnName("Fireplace");

                    b.Property<int>("FloorTypeID")
                        .HasColumnType("int");

                    b.Property<int>("FrameTypeID")
                        .HasColumnType("int");

                    b.Property<bool>("Furnished")
                        .HasColumnType("bit")
                        .HasColumnName("Furnished");

                    b.Property<bool>("Garret")
                        .HasColumnType("bit")
                        .HasColumnName("Garret");

                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Guid");

                    b.Property<bool>("InternalStaircase")
                        .HasColumnType("bit")
                        .HasColumnName("InternalStaircase");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("IsDeleted");

                    b.Property<bool>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("IsEnabled");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime")
                        .HasColumnName("LastModified");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("LastModifiedBy");

                    b.Property<bool>("LoadingUnloadingElevator")
                        .HasColumnType("bit")
                        .HasColumnName("LoadingUnloadingElevator");

                    b.Property<bool>("NightCurrent")
                        .HasColumnType("bit")
                        .HasColumnName("NightCurrent");

                    b.Property<bool>("Painted")
                        .HasColumnType("bit")
                        .HasColumnName("Painted");

                    b.Property<bool>("PetsWelcome")
                        .HasColumnType("bit")
                        .HasColumnName("PetsWelcome");

                    b.Property<bool>("Playroom")
                        .HasColumnType("bit")
                        .HasColumnName("Playroom");

                    b.Property<int>("PowerTypeID")
                        .HasColumnType("int");

                    b.Property<bool>("SatelliteAntenna")
                        .HasColumnType("bit")
                        .HasColumnName("SatelliteAntenna");

                    b.Property<bool>("SecurityDoor")
                        .HasColumnType("bit")
                        .HasColumnName("SecurityDoor");

                    b.Property<bool>("SolarHeating")
                        .HasColumnType("bit")
                        .HasColumnName("SolarHeating");

                    b.Property<bool>("SuspendedCeiling")
                        .HasColumnType("bit")
                        .HasColumnName("SuspendedCeiling");

                    b.Property<bool>("UnderfloorHeating")
                        .HasColumnType("bit")
                        .HasColumnName("UnderfloorHeating");

                    b.Property<bool>("Warehouse")
                        .HasColumnType("bit")
                        .HasColumnName("Warehouse");

                    b.Property<bool>("Wiring")
                        .HasColumnType("bit")
                        .HasColumnName("Wiring");

                    b.Property<bool>("WithEquipment")
                        .HasColumnType("bit")
                        .HasColumnName("WithEquipment");

                    b.HasKey("InteriorFeaturesID");

                    b.HasIndex("FloorTypeID");

                    b.HasIndex("FrameTypeID");

                    b.HasIndex("PowerTypeID");

                    b.ToTable("InteriorFeature", "dbo");
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.Photos", b =>
                {
                    b.Property<int>("PhotoID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PhotoID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ClassifiedID")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("Created");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("CreatedBy");

                    b.Property<byte[]>("FileContent")
                        .IsRequired()
                        .HasColumnType("varbinary")
                        .HasColumnName("FileContent");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("FileName");

                    b.Property<decimal>("FileSize")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("FileSize");

                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Guid");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("IsDeleted");

                    b.Property<bool>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("IsEnabled");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime")
                        .HasColumnName("LastModified");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("LastModifiedBy");

                    b.HasKey("PhotoID");

                    b.HasIndex("ClassifiedID");

                    b.ToTable("Photos", "dbo");
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.PowerType", b =>
                {
                    b.Property<int>("PowerTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("Created");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("CreatedBy");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Description");

                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Guid");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("IsDeleted");

                    b.Property<bool>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("IsEnabled");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime")
                        .HasColumnName("LastModified");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("LastModifiedBy");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Title");

                    b.HasKey("PowerTypeID");

                    b.ToTable("PowerSupplyType", "dbo");
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.SuitableFor", b =>
                {
                    b.Property<int>("SuitableForID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SuitableForID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("Created");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("CreatedBy");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Description");

                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Guid");

                    b.Property<bool>("HolidayHomeUse")
                        .HasColumnType("bit")
                        .HasColumnName("HolidayHomeUse");

                    b.Property<bool>("InvestmentUse")
                        .HasColumnType("bit")
                        .HasColumnName("InvestmentUse");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("IsDeleted");

                    b.Property<bool>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("IsEnabled");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime")
                        .HasColumnName("LastModified");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("LastModifiedBy");

                    b.Property<bool>("ProfessionalUse")
                        .HasColumnType("bit");

                    b.Property<bool>("StudentUse")
                        .HasColumnType("bit")
                        .HasColumnName("StudentUse");

                    b.Property<bool>("TouristRentalUse")
                        .HasColumnType("bit");

                    b.HasKey("SuitableForID");

                    b.ToTable("SuitableFor", "dbo");
                });

            modelBuilder.Entity("CleanArchitecture.Infrastructure.Identity.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.DeviceFlowCodes", b =>
                {
                    b.Property<string>("UserCode")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(50000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("DeviceCode")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("Expiration")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("UserCode");

                    b.HasIndex("DeviceCode")
                        .IsUnique();

                    b.HasIndex("Expiration");

                    b.ToTable("DeviceCodes");
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.PersistedGrant", b =>
                {
                    b.Property<string>("Key")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("ConsumedTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(50000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("Expiration")
                        .HasColumnType("datetime2");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Key");

                    b.HasIndex("Expiration");

                    b.HasIndex("SubjectId", "ClientId", "Type");

                    b.HasIndex("SubjectId", "SessionId", "Type");

                    b.ToTable("PersistedGrants");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.Classified", b =>
                {
                    b.HasOne("CleanArchitecture.Domain.Entities.AdvertiserInfo", "AdvertiserInfo")
                        .WithMany("Classifieds")
                        .HasForeignKey("AdvertiserInfoID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CleanArchitecture.Domain.Entities.ClassifiedCharacteristics", "ClassifiedCharacteristics")
                        .WithOne("Classified")
                        .HasForeignKey("CleanArchitecture.Domain.Entities.Classified", "CharacteristicsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CleanArchitecture.Domain.Entities.ClassifiedConstruction", "ClassifiedConstruction")
                        .WithOne("Classified")
                        .HasForeignKey("CleanArchitecture.Domain.Entities.Classified", "ClassifiedConstructionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CleanArchitecture.Domain.Entities.ExteriorFeature", "ExteriorFeature")
                        .WithOne("Classified")
                        .HasForeignKey("CleanArchitecture.Domain.Entities.Classified", "ExteriorFeaturesID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CleanArchitecture.Domain.Entities.FloorNo", "FloorNo")
                        .WithMany("Classifieds")
                        .HasForeignKey("FloorNoID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CleanArchitecture.Domain.Entities.GoogleMapPlace", "GoogleMapPlace")
                        .WithOne("Classified")
                        .HasForeignKey("CleanArchitecture.Domain.Entities.Classified", "GoogleMapPlaceID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CleanArchitecture.Domain.Entities.InteriorFeature", "InteriorFeature")
                        .WithOne("Classified")
                        .HasForeignKey("CleanArchitecture.Domain.Entities.Classified", "InteriorFeaturesID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CleanArchitecture.Domain.Entities.ClassifiedPurpose", "ClassifiedPurpose")
                        .WithMany("Classifieds")
                        .HasForeignKey("PurposeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CleanArchitecture.Domain.Entities.SuitableFor", "SuitableFor")
                        .WithOne("Classified")
                        .HasForeignKey("CleanArchitecture.Domain.Entities.Classified", "SuitableForID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CleanArchitecture.Domain.Entities.ClassifiedType", "ClassifiedType")
                        .WithMany("Classifieds")
                        .HasForeignKey("TypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AdvertiserInfo");

                    b.Navigation("ClassifiedCharacteristics");

                    b.Navigation("ClassifiedConstruction");

                    b.Navigation("ClassifiedPurpose");

                    b.Navigation("ClassifiedType");

                    b.Navigation("ExteriorFeature");

                    b.Navigation("FloorNo");

                    b.Navigation("GoogleMapPlace");

                    b.Navigation("InteriorFeature");

                    b.Navigation("SuitableFor");
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.ClassifiedCharacteristics", b =>
                {
                    b.HasOne("CleanArchitecture.Domain.Entities.EnergyClass", "EnergyClass")
                        .WithMany("ClassifiedCharacteristics")
                        .HasForeignKey("EnergyClassID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CleanArchitecture.Domain.Entities.HeatingSystem", "HeatingSystem")
                        .WithMany("ClassifiedCharacteristics")
                        .HasForeignKey("HeatingSystemID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CleanArchitecture.Domain.Entities.HeatingType", "HeatingType")
                        .WithMany("ClassifiedCharacteristics")
                        .HasForeignKey("HeatingTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EnergyClass");

                    b.Navigation("HeatingSystem");

                    b.Navigation("HeatingType");
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.InteriorFeature", b =>
                {
                    b.HasOne("CleanArchitecture.Domain.Entities.FloorType", "FloorType")
                        .WithMany("InteriorFeatures")
                        .HasForeignKey("FloorTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CleanArchitecture.Domain.Entities.FrameType", "FrameType")
                        .WithMany("InteriorFeatures")
                        .HasForeignKey("FrameTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CleanArchitecture.Domain.Entities.PowerType", "PowerType")
                        .WithMany("InteriorFeatures")
                        .HasForeignKey("PowerTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FloorType");

                    b.Navigation("FrameType");

                    b.Navigation("PowerType");
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.Photos", b =>
                {
                    b.HasOne("CleanArchitecture.Domain.Entities.Classified", "Classified")
                        .WithMany("Photos")
                        .HasForeignKey("ClassifiedID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Classified");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("CleanArchitecture.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("CleanArchitecture.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CleanArchitecture.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("CleanArchitecture.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.AdvertiserInfo", b =>
                {
                    b.Navigation("Classifieds");
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.Classified", b =>
                {
                    b.Navigation("Photos");
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.ClassifiedCharacteristics", b =>
                {
                    b.Navigation("Classified");
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.ClassifiedConstruction", b =>
                {
                    b.Navigation("Classified");
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.ClassifiedPurpose", b =>
                {
                    b.Navigation("Classifieds");
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.ClassifiedType", b =>
                {
                    b.Navigation("Classifieds");
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.EnergyClass", b =>
                {
                    b.Navigation("ClassifiedCharacteristics");
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.ExteriorFeature", b =>
                {
                    b.Navigation("Classified");
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.FloorNo", b =>
                {
                    b.Navigation("Classifieds");
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.FloorType", b =>
                {
                    b.Navigation("InteriorFeatures");
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.FrameType", b =>
                {
                    b.Navigation("InteriorFeatures");
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.GoogleMapPlace", b =>
                {
                    b.Navigation("Classified");
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.HeatingSystem", b =>
                {
                    b.Navigation("ClassifiedCharacteristics");
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.HeatingType", b =>
                {
                    b.Navigation("ClassifiedCharacteristics");
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.InteriorFeature", b =>
                {
                    b.Navigation("Classified");
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.PowerType", b =>
                {
                    b.Navigation("InteriorFeatures");
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.SuitableFor", b =>
                {
                    b.Navigation("Classified");
                });
#pragma warning restore 612, 618
        }
    }
}
